// Темы:
// Перегрузка операторов.
// Встроенные объекты 

//#include "stdafx.h"	//если Вы используете предкомпиляцию заголовочных
					//файлов, раскомментируйте эту строчку
#include <tchar.h>
#include "myString.h"
#include  "Employee.h"

#include "Point.h"
#include "Pair.h"
#include "DataBase.h"
#define	  stop __asm nop


int _tmain(int argc, _TCHAR* argv[])
{


	//Задание 1.Перегрузка операторов.

	//Подключите к проекту файлы MyString.cpp и MyString.h
	//класса MyString, разработанного Вами на предыдущем занятии
	//9a. Перегрузите оператор присваивания для класса MyString
	//Проверьте корректность работы перегруженного оператора

	{
		MyString s1("AAA"), s2;
		//MyString s3(s2);
		//s2.SetString("sdwad");
		s2 = s1;
		const char* string = s2.GetString();
		//std::cout << string;
		s1 = "CCC";
		s2 = MyString("tmp");
		s1 = s1;
		stop


	}




	//Создайте класс Point, который будет содержать координаты
	//"точки". Объявите конструктор (конструкторы) класса   

	//1b. "Перегрузите" оператор += так, чтобы при выполнении
	//операции типа pt2+=pt1; складывались
	//одноименные переменные объектов pt1 и pt2, а сумма
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2+=1; обе переменные объекта pt2 увеличивались на
	// указанное значение
	//a) с помощью метода класса (оператор +=)
	//б) с помощью глобальной функции (оператор -=)							
	//Проверьте корректность работы перегруженного оператора

	/*
	Point pt1(1,1);
	Point pt2(2,2);
	pt2+=pt1;
	pt2+=1;
	Point pt3(3,3);
	pt2+=pt1+=pt3;
	stop
	*/


	//Задание 1c. Перегрузите оператор +/- 
	//a)с помощью методов класса (оператор +)
	//б) с помощью  глобальных функций (оператор -)
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
	Point pt1(1, 1);
	Point pt2(2, 2);
	Point pt3;

	pt3 = pt1 + 5;
	pt3 = 2 + pt1;
	pt3 = pt1 + pt2;

	pt3 = pt1 - 5;
	pt3 = pt1 - pt2;
	stop

		//Задание 1d. Перегрузите унарный оператор +/- 
		pt3 = -pt1;
	pt3 = +pt1;

	stop




		//Задание 1d. Перегрузите оператор << (вывода в поток) для
		//класса MyString таким образом, чтобы при выполнении приведенной строки
		//на экран было выведено:
		//contents:  "QWERTY"

		MyString s("QWERTY");
	std::cout << s << std::endl;

	//Задание 1е Перегрузите оператор + и += для класса MyString
	MyString s1("ABC"), s2("kkk");
	s1 += s;
	s2 = s + s1;
	stop

		//Задание 2. Разработать "базу данных" о сотрудниках посредством ассоциативного
		//массива. Ключом является фамилия (ключ в задании уникален, поэтому нескольких Ивановых
		//в базе быть не может), а данными: пол, возраст, должность, зарплата...
		//Реализуйте:
		//добавление сотрудников в базу
		//исключение
		//вывод информации о конкретном сотруднике
		//вывод всей (или интересующей) информации о всех сотрудниках
		//Например:

/*	{
		Employee emp1("123", "321", "Manager", Employee::Male, 23, 2300);
		Employee emp2(emp1);
		Pair pair("Posokhov", emp1);
		Pair pair2(pair);
		bool str = pair.operator==("C++");
		stop
	}
*/
		



		DataBase bd;	//создание пустой базы
		
		Employee emp("111","222", "Stud", Employee::Male, 30,2500);	//если Ivanov-а в базе еще нет, то
		bd["Ivanov"] = Employee ("111", "222", "Stud", Employee::Male, 30, 2500);

		bd["Ivanov"] = Employee("333", "444", "IT", Employee::Male, 30, 2500);//добавление, если уже есть, то замена его реквизитов
		bd["Petrov"] = Employee("555", "666", "IT", Employee::Male, 30, 3500);
		bd["Sidorov"] = Employee("555", "666", "IT", Employee::Male, 30, 3500);
				
						
		std::cout<<bd;	//вывод информации обо всех сотрудниках
		//А также:
		DataBase bdnew = bd;
		//
		 bdnew = bd;
		 bdnew.RemoveEmployee("Sidorov");
		 std::cout << bdnew;
		
		 std::cout << bdnew["Ivanov"];
		 stop
		//А также можно вспомнить про семантику перемещения...



	
	return 0;
}//endmain

