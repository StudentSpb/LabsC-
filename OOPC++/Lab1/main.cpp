#include "myRect.h"
#include "myString.h"
#include "Bochka.h"
#include <iostream>
#include <algorithm>


#define stop __asm nop

class Bochka;

void main()
{
	using namespace std;

	//Задание 1.Объявление класса. Создание экземпляра класса.
	//Вызов методов класса. 
	//Откройте закладку Class View - (здесь Вы увидите имена методов и
	//данных - классов Rect и MyString)
	//Обратите внимание на пиктограммы слева от имен членов класса - они
	//обозначают спецификатор доступа к каждому члену класса.

	//Какой конструктор вызывается при создании экземпляра класса?
	{
		Rect rect; //По умолчанию
		stop
	}

	//1a. Объявите и определите конструктор с параметрами для
	//инициализации переменных класса. Создайте экземляры класса Rect
	//с помощью конструктора с параметрами. Если компилятор выдает
	//ошибку в предыдущем фрагменте, подумайте - чего ему не
	//хватает? Добейтесь отсутствия ошибок.
	//Выполняя задание с самого начала по шагам, определите:
	//в какой момент происходит вызов конструктора(какого?)?

		//Если просто создается класс, то вызывается обычный конструктор с параметрами
		//Если класс создается с параметрами, то вызывается конструктор с параметрами
		Rect rect(5, 10, 10, 15);
		stop



			//1б. При конструировании объекта посредством конструктора без параметров
			//предусмотрите инициализацию переменных класса, например, нулем



			//1в. Подумайте, как следует поступать в случае, когда пользователь задал
			//координаты следующим образом:

			//Rect rrr(4,3,2,1);

			stop
			//1г. Объявите, определите и вызовите метод класса InflateRect(), 
			//который увеличивает размеры прямоугольника на заданные приращения
			//(раздвигая стороны от центра - каждую сторону на свое значение).
			//Подсказка: объявить и определить методы можно не только "вручную",
			//но и с помощью Wizard-a Class View. Для этого: откройте закладку
			//ClassView окна проекта, сделайте активным класс Rect и нажмите
			//правую кнопку мыши - в появившемся контекстном меню выберите
			//Add/Add Member Function... С помощью появившейся диалоговой панели
			//"дайте указания" Wizard-у как объявить и определить метод.

			rect.InflateRect(5, 5, 3, 2);
	

	
	stop


	//Задание 2.Перегрузка конструкторов и методов класса.
	//Конструктор копирования.

	//2а.Объявите и определите конструктор копирования в классе Rect.
	//Выполняя задание по шагам, определите, какой
	//конструктор вызывается при создании r1,r2,r3 и r4?
	//Чему равны переменные созданных объектов?
		Rect r1;			// вызван конструктор по умолчанию
		Rect r2(1,2,3,4);	// вызван конструктор с параметрами
		Rect r3 = r1;		// вызван конструктор копирования
		Rect r4(r2);		// вызван конструктор копирования
		stop


  //2б. Объявите и определите в классе Rect метод InflateRect(),
	//который принимает два аргумента, по умолчанию равных 1, и 
	//раздвигает стороны прямоугольника на на заданные приращения.
	//Для каких объектов вызывается функция InflateRect()?
		r1.InflateRect(1,1);	// вызван для объекта r1
		r2.InflateRect(2,2);	// вызван для объекта r2
	//Какая из функций InflateRect() вызывается в каждом из трех случаев?
		r3.InflateRect(2,2,2,2);	//вызван метод с 4мя параметрами
		r3.InflateRect(3,3);		//вызван метод с 2мя параметрами	
		r3.InflateRect(5);			//вызван метод с 2мя параметрами
		r3.InflateRect();			//вызван метод с 2мя параметрами
	stop


	
	//Задание 3.Спецификаторы доступа. Инкапсуляция. 
	{
	Rect r;
	//Раскомментируйте следующую строку. Объясните ошибку
	//компилятора

//	int tmp = r.m_left; // Поле приватное и к нему нельзя обратится 



	//Введите в класс Rect метод void SetAll(...),
	//который присваивают переменным класса передаваемые
	//значения. Вызовите созданный метод, проверьте корректность. 

	r3.SetAll(5, 5, 2, 5);


	//Введите в класс Rect парный метод GetAll(...),
	//который "достает" значения private-переменных класса.
	//Вызовите созданный метод, проверьте корректность. 
	int left, right, top, bottom;
	r3.GetAll(left, right, top, bottom);

	stop
	}


	//Задание 4.Передача экземпляра класса в качестве параметра
	//функции. Возвращение объекта класса по значению. Поставив
	//остановы в конструкторе копирования или выполняя фрагмент
	//по шагам, определите: в какой момент происходит обращение
	//к конструктору копирования. 
	//Создайте глобальную функцию 
	// Rect BoundingRect(Rect, Rect);
	//которая принимает два объекта класса Rect по значению и
	//возвращает объект класса Rect, который является прямоугольником,
	//в который вписаны заданные прямоугольники. Как происходит
	//передача параметров и возвращение объекта класса?

	//Замечание*: хорошо было бы учесть тот факт, что прямоугольник
	//может оказаться "ненормализованным", то есть m_left>m_right или/и
	//m_top>m_bottom

	{

		Rect r1(1,2,3,4), r2(5,6,7,8),r3;
		r3= BoundingRect(r1, r2);
	stop
	
	//Задание 4а. Передача объектов по ссылке.
	//Создайте глобальную функцию BoundingRect2, которая выполняет ту же
	//задачу, принимая параметры по ссылке
	//Вызываются ли конструкторы при передаче параметров?
	

	r3 = BoundingRect2(r1, r2);
	stop
	}




	//Задание 5. Указатель на класс. Объявите и определите
	//явный деструктор класса. Поставьте остановы в 
	//конструкторе (конструкторах) и деструкторе. Определите: когда для
	//каждого из объектов вызывается конструктор, а когда - деструктор?
	{
		Rect r1;
		Rect*	pR = new Rect(1,2,1,2);	
		{
			Rect r2(r1); //Вызывается конструктор копирования
			Rect arRect[2];
			for(int i=0; i<3; i++)
			{
				static Rect r3 (i,i,i,i) ;
				Rect r4(*pR);
				Rect r5(i,i,i,i);
			} //При завершении цикла будет вызываться деструктор для r4 и r5
		}//Пи завершении блока будет вызван деструктор r2
		delete pR;	
		stop
	} //Вызовется деструктор r1


	//Задание 6.Конструктор + деструктор = функциональное
	// замыкание. Класс MyString
	// Посредством конструктора (конструкторов) и деструктора обеспечьте
	//корректные инициализацию и деактивацию объекта
	//C помощью остановов определите когда происходит
	//захват и освобождение памяти для строки-члена класса
	{
		MyString	str("It's my string!");
		//Создайте метод GetString(), который обеспечит доступ к хранящейся строке.
		//С помощью cout и метода GetString() распечатайте строку объекта str
		//Замечание: подумайте, как следует корректно реализовать метод GetString().

		//...
		const char* string = str.GetString();
		std::cout << string;
	}
	stop


	//6a. Раскомментируйте следующий фрагмент. Подумайте - какие
	//неприятности Вас ожидают. Попробуйте исправить положение (как?)
	{
		MyString str1("The first string!");
		MyString str2 = str1;


		//6б. Реализуйте метод SetNewString, который будет заменять строку
		// на новую

		str1.SetString("New String!");
		std::cout << " "<< str1.GetString();
	}
		stop

		//6г. Создайте глобальную функцию, которая будет принимать любое
		//количество указателей на строки, а возвращать объект MyString,
		//в котором строка будет конкатенацией параметров
		MyString newStr = GetMyString("1234", "qwer", "asdf", "zxcv",0);
		cout << " " << newStr.GetString();
	stop


	//Задание 7.Массив объектов класса.
	{
	//Объявите и проинициализируйте массив ar из объектов
	// типа MyString. Например:
	//Как задать размерность? N=3
	//MyString arstr[N] = {...
	
	const int N = 3;
	MyString arstr[N] = {MyString("1234"), MyString("qwer"), MyString("zxcv")};


	//Проверка - печать строк-членов класса
	for (int i = 0; i < N; i++)
	{
		cout << "\n" << arstr[i].GetString();
	}


	//Увеличьте размер массива, не изменяя список инициализаторов:
	//N=5???
	const int M = 5;
	MyString arstr1[M] = {arstr[0],arstr[1], arstr[2], MyString(""), MyString("")};
	

	//Объявите и проинициализируйте массив объектов	типа Rect.
	Rect rect1[N] = { Rect(1,2,3,4), Rect(5,6,7,8), Rect(1,3,5,6)};

	}
	stop


	//Задание 8.Массив указателей на объекты класса.
	{
	//Объявите и проинициализируйте массив arPtr из трех 
	//указателей на объекты типа MyString.
	const int N = 3;

	MyString*  arPtr[N] = {new MyString("1234"), new MyString("qwer"), new MyString("zxcv") };
	
	//Печать строк-членов класса
	for (int i = 0; i < N; i++)
	{
		cout << "\n" <<arPtr[i]->GetString();
	}
	for (int i = 0; i < N; i++)
	{
		delete arPtr[i];
	}
	stop
	}
	

	//Задание 9.  Решите с помощью классов следующую задачу:
	//даны две бочки известного объема. В одной бочке в начальный момент
	//времени содержится спирт (96%), в другой – вода.
	//Кружкой емкостью 1л переливаем итеративно содержимое из одной бочки
	//в другую следующим способом: на каждой итерации
	//зачерпнули из первой бочки -> вылили во вторую
	//зачерпнули из второй бочки -> вылили в первую.
	//Требуется определить номер итерации, на которой концентрация спирта в
	//первой бочке станет меньше 50%.

	Bochka _spirt(100, 0.96, spirt);
	Bochka _water(100, 0, watet);

	float conc = _spirt.GetConc();
	int i = 0;
		while(conc > 0.5)
		{
			_spirt.Pereliv(_water); //или spirt.Pereliv(water, объем_кружки);
			_water.Pereliv(_spirt); // аналогично
			conc = _spirt.GetConc();
			i++;
		}
		cout << "\n" <<i;
		stop;
}//	end_main

